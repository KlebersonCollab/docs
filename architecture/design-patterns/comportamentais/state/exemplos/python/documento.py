#!/usr/bin/env python3
"""
Exemplo pr√°tico do Padr√£o State em Python
Sistema de documentos com controle de estados
Baseado na transcri√ß√£o do v√≠deo sobre padr√£o State

Este exemplo demonstra como implementar o padr√£o State
para controlar os estados de um documento (rascunho, modera√ß√£o, publicado)
"""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import Optional, List
from enum import Enum


class TipoUsuario(Enum):
    """Tipos de usu√°rio do sistema"""
    ADMIN = "admin"
    USUARIO = "usuario"


class EstadoDocumento(ABC):
    """Interface que define o contrato para todos os estados de documento"""
    
    @abstractmethod
    def publicar(self, documento: 'Documento', usuario: TipoUsuario) -> None:
        """Publica o documento baseado no tipo de usu√°rio"""
        pass
    
    @abstractmethod
    def aprovar(self, documento: 'Documento') -> None:
        """Aprova o documento (apenas para modera√ß√£o)"""
        pass
    
    @abstractmethod
    def rejeitar(self, documento: 'Documento') -> None:
        """Rejeita o documento (apenas para modera√ß√£o)"""
        pass


class Rascunho(EstadoDocumento):
    """Estado inicial - Documento em rascunho"""
    
    def publicar(self, documento: 'Documento', usuario: TipoUsuario) -> None:
        print(f"üìù Publicando documento como {usuario.value}...")
        
        if usuario == TipoUsuario.ADMIN:
            # Admin pode publicar diretamente
            documento.set_estado(Publicado())
            print("‚úÖ Documento publicado diretamente pelo admin")
        else:
            # Usu√°rio comum vai para modera√ß√£o
            documento.set_estado(Moderacao())
            print("‚è≥ Documento enviado para modera√ß√£o")
    
    def aprovar(self, documento: 'Documento') -> None:
        raise ValueError("‚ùå Documento em rascunho n√£o pode ser aprovado")
    
    def rejeitar(self, documento: 'Documento') -> None:
        raise ValueError("‚ùå Documento em rascunho n√£o pode ser rejeitado")


class Moderacao(EstadoDocumento):
    """Estado de modera√ß√£o - Documento aguardando aprova√ß√£o"""
    
    def publicar(self, documento: 'Documento', usuario: TipoUsuario) -> None:
        raise ValueError("‚ùå Documento j√° est√° em modera√ß√£o")
    
    def aprovar(self, documento: 'Documento') -> None:
        print("‚úÖ Documento aprovado na modera√ß√£o")
        documento.set_estado(Publicado())
    
    def rejeitar(self, documento: 'Documento') -> None:
        print("‚ùå Documento rejeitado na modera√ß√£o")
        documento.set_estado(Rascunho())


class Publicado(EstadoDocumento):
    """Estado final - Documento publicado"""
    
    def publicar(self, documento: 'Documento', usuario: TipoUsuario) -> None:
        raise ValueError("‚ùå Documento j√° foi publicado")
    
    def aprovar(self, documento: 'Documento') -> None:
        raise ValueError("‚ùå Documento j√° foi publicado")
    
    def rejeitar(self, documento: 'Documento') -> None:
        raise ValueError("‚ùå Documento j√° foi publicado")


class Documento:
    """Classe Documento - Contexto do padr√£o State"""
    
    def __init__(self, titulo: str, conteudo: str, autor: str):
        self.titulo = titulo
        self.conteudo = conteudo
        self.autor = autor
        self.criado_em = datetime.now()
        self.modificado_em = datetime.now()
        self.historico_estados: List[str] = []
        
        # Sempre inicia como rascunho
        self.estado = Rascunho()
        self.historico_estados.append("Rascunho")
        
        print(f"üìÑ Documento '{titulo}' criado por {autor}")
        print(f"‚è∞ Criado em: {self.criado_em.strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"üìä Estado atual: {self.get_estado_atual()}\n")
    
    def publicar(self, usuario: TipoUsuario) -> None:
        """Delega a opera√ß√£o para o estado atual"""
        try:
            self.estado.publicar(self, usuario)
            self.modificado_em = datetime.now()
            self.historico_estados.append(self.get_estado_atual())
        except ValueError as e:
            print(f"‚ùå Erro: {e}")
    
    def aprovar(self) -> None:
        """Delega a opera√ß√£o para o estado atual"""
        try:
            self.estado.aprovar(self)
            self.modificado_em = datetime.now()
            self.historico_estados.append(self.get_estado_atual())
        except ValueError as e:
            print(f"‚ùå Erro: {e}")
    
    def rejeitar(self) -> None:
        """Delega a opera√ß√£o para o estado atual"""
        try:
            self.estado.rejeitar(self)
            self.modificado_em = datetime.now()
            self.historico_estados.append(self.get_estado_atual())
        except ValueError as e:
            print(f"‚ùå Erro: {e}")
    
    def set_estado(self, estado: EstadoDocumento) -> None:
        """Permite que os estados alterem o estado do documento"""
        self.estado = estado
        print(f"üîÑ Estado alterado para: {self.get_estado_atual()}")
    
    def get_estado_atual(self) -> str:
        """Retorna o nome do estado atual"""
        return self.estado.__class__.__name__
    
    def pode_editar(self) -> bool:
        """Verifica se o documento pode ser editado"""
        return isinstance(self.estado, Rascunho)
    
    def pode_publicar(self) -> bool:
        """Verifica se o documento pode ser publicado"""
        return isinstance(self.estado, (Rascunho, Moderacao))
    
    def get_info(self) -> dict:
        """Retorna informa√ß√µes do documento"""
        return {
            'titulo': self.titulo,
            'autor': self.autor,
            'estado': self.get_estado_atual(),
            'criado_em': self.criado_em.strftime('%d/%m/%Y %H:%M:%S'),
            'modificado_em': self.modificado_em.strftime('%d/%m/%Y %H:%M:%S'),
            'historico': self.historico_estados
        }


def demonstrar_fluxo_admin():
    """Demonstra o fluxo de publica√ß√£o por um admin"""
    print("=== FLUXO DE PUBLICA√á√ÉO POR ADMIN ===")
    
    documento = Documento(
        "Guia de Python", 
        "Este √© um guia completo sobre Python...", 
        "Jo√£o Silva"
    )
    
    # Admin publica diretamente
    documento.publicar(TipoUsuario.ADMIN)
    
    # Tentativa de publicar novamente
    documento.publicar(TipoUsuario.ADMIN)
    
    print(f"üìä Informa√ß√µes finais: {documento.get_info()}\n")


def demonstrar_fluxo_usuario():
    """Demonstra o fluxo de publica√ß√£o por um usu√°rio comum"""
    print("=== FLUXO DE PUBLICA√á√ÉO POR USU√ÅRIO ===")
    
    documento = Documento(
        "Tutorial de Django", 
        "Aprenda Django do zero...", 
        "Maria Santos"
    )
    
    # Usu√°rio publica (vai para modera√ß√£o)
    documento.publicar(TipoUsuario.USUARIO)
    
    # Admin aprova na modera√ß√£o
    documento.aprovar()
    
    # Tentativa de publicar novamente
    documento.publicar(TipoUsuario.USUARIO)
    
    print(f"üìä Informa√ß√µes finais: {documento.get_info()}\n")


def demonstrar_fluxo_rejeicao():
    """Demonstra o fluxo de rejei√ß√£o na modera√ß√£o"""
    print("=== FLUXO DE REJEI√á√ÉO NA MODERA√á√ÉO ===")
    
    documento = Documento(
        "Artigo Pol√™mico", 
        "Conte√∫do controverso...", 
        "Pedro Costa"
    )
    
    # Usu√°rio publica (vai para modera√ß√£o)
    documento.publicar(TipoUsuario.USUARIO)
    
    # Admin rejeita na modera√ß√£o
    documento.rejeitar()
    
    # Agora pode publicar novamente
    documento.publicar(TipoUsuario.USUARIO)
    
    print(f"üìä Informa√ß√µes finais: {documento.get_info()}\n")


def demonstrar_violacoes():
    """Demonstra tentativas de violar as regras"""
    print("=== TENTATIVAS DE VIOLAR REGRAS ===")
    
    documento = Documento(
        "Documento Teste", 
        "Conte√∫do de teste...", 
        "Ana Lima"
    )
    
    # Tentativa de aprovar documento em rascunho
    documento.aprovar()
    
    # Tentativa de rejeitar documento em rascunho
    documento.rejeitar()
    
    # Publicar como admin (vai direto para publicado)
    documento.publicar(TipoUsuario.ADMIN)
    
    # Tentativa de aprovar documento j√° publicado
    documento.aprovar()
    
    print(f"üìä Informa√ß√µes finais: {documento.get_info()}\n")


def main():
    """Fun√ß√£o principal que executa todas as demonstra√ß√µes"""
    print("üéØ DEMONSTRA√á√ÉO DO PADR√ÉO STATE EM PYTHON")
    print("Sistema de Documentos com Controle de Estados\n")
    
    demonstrar_fluxo_admin()
    demonstrar_fluxo_usuario()
    demonstrar_fluxo_rejeicao()
    demonstrar_violacoes()
    
    print("=== DEMONSTRA√á√ÉO CONCLU√çDA ===")
    print("‚úÖ O padr√£o State garante que as regras de neg√≥cio sejam respeitadas!")
    print("‚úÖ Cada estado controla suas pr√≥prias transi√ß√µes!")
    print("‚úÖ Imposs√≠vel violar as regras de transi√ß√£o!")


if __name__ == "__main__":
    main()




