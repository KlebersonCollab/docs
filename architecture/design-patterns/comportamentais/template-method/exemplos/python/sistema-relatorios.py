"""
Exemplo do Padr√£o Template Method - Sistema de Relat√≥rios

Este exemplo demonstra como implementar o padr√£o Template Method para
eliminar duplica√ß√£o de c√≥digo em um sistema de gera√ß√£o de relat√≥rios
que processa diferentes tipos de dados e gera relat√≥rios em formatos diversos.
"""

from abc import ABC, abstractmethod
from datetime import datetime
from typing import List, Dict, Any
import json
import csv
import xml.etree.ElementTree as ET


class ReportGenerator(ABC):
    """
    Classe abstrata que define o template method para gera√ß√£o de relat√≥rios.
    Define o esqueleto do algoritmo e implementa m√©todos comuns.
    """
    
    def generate_report(self, data: List[Dict[str, Any]]) -> str:
        """
        Template Method - define o esqueleto do algoritmo
        Este m√©todo n√£o pode ser sobrescrito pelas subclasses
        """
        print("üöÄ Iniciando gera√ß√£o de relat√≥rio...")
        
        # 1. Validar dados
        validated_data = self.validate_data(data)
        print(f"‚úÖ Dados validados: {len(validated_data)} registros")
        
        # 2. Processar dados
        processed_data = self.process_data(validated_data)
        print(f"üîç Dados processados: {len(processed_data)} registros")
        
        # 3. Formatar dados
        formatted_data = self.format_data(processed_data)
        print(f"üìù Dados formatados: {len(formatted_data)} registros")
        
        # 4. Gerar relat√≥rio (implementa√ß√£o comum)
        report_content = self.generate_report_content(formatted_data)
        
        # 5. Salvar relat√≥rio (implementa√ß√£o comum)
        file_path = self.save_report(report_content)
        
        # 6. Enviar notifica√ß√µes (implementa√ß√£o comum)
        self.send_notifications(file_path, len(formatted_data))
        
        print("‚úÖ Relat√≥rio gerado com sucesso!")
        return file_path
    
    @abstractmethod
    def validate_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        M√©todo abstrato para validar dados
        Cada subclasse implementa sua pr√≥pria l√≥gica de valida√ß√£o
        """
        pass
    
    @abstractmethod
    def process_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        M√©todo abstrato para processar dados
        Cada subclasse implementa sua pr√≥pria l√≥gica de processamento
        """
        pass
    
    @abstractmethod
    def format_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """
        M√©todo abstrato para formatar dados
        Cada subclasse implementa sua pr√≥pria l√≥gica de formata√ß√£o
        """
        pass
    
    @abstractmethod
    def get_file_extension(self) -> str:
        """
        M√©todo abstrato para obter extens√£o do arquivo
        Cada subclasse retorna sua extens√£o espec√≠fica
        """
        pass
    
    @abstractmethod
    def get_report_type(self) -> str:
        """
        M√©todo abstrato para obter tipo de relat√≥rio
        Cada subclasse retorna seu tipo espec√≠fico
        """
        pass
    
    def generate_report_content(self, data: List[Dict[str, Any]]) -> str:
        """
        M√©todo comum para gerar conte√∫do do relat√≥rio
        Implementa√ß√£o compartilhada entre todas as subclasses
        """
        print("üìä Gerando conte√∫do do relat√≥rio...")
        
        # Cabe√ßalho do relat√≥rio
        header = self._generate_header()
        
        # Corpo do relat√≥rio
        body = self._generate_body(data)
        
        # Rodap√© do relat√≥rio
        footer = self._generate_footer()
        
        return f"{header}\n{body}\n{footer}"
    
    def save_report(self, content: str) -> str:
        """
        M√©todo comum para salvar relat√≥rio
        Implementa√ß√£o compartilhada entre todas as subclasses
        """
        print("üíæ Salvando relat√≥rio...")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"relatorio_{self.get_report_type().lower()}_{timestamp}.{self.get_file_extension()}"
        filepath = f"reports/{filename}"
        
        # Simular salvamento do arquivo
        print(f"   üìÅ Arquivo salvo em: {filepath}")
        print(f"   üìä Tamanho do arquivo: {len(content)} caracteres")
        
        return filepath
    
    def send_notifications(self, file_path: str, record_count: int) -> None:
        """
        M√©todo comum para enviar notifica√ß√µes
        Implementa√ß√£o compartilhada entre todas as subclasses
        """
        print("üìß Enviando notifica√ß√µes...")
        
        # Notificar por email
        self._send_email_notification(file_path, record_count)
        
        # Notificar por sistema interno
        self._send_internal_notification(file_path, record_count)
        
        # Notificar stakeholders
        self._notify_stakeholders(file_path, record_count)
    
    def _generate_header(self) -> str:
        """Gerar cabe√ßalho do relat√≥rio"""
        return f"""
========================================
RELAT√ìRIO {self.get_report_type().upper()}
========================================
Data de Gera√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
Tipo de Relat√≥rio: {self.get_report_type()}
========================================
"""
    
    def _generate_body(self, data: List[Dict[str, Any]]) -> str:
        """Gerar corpo do relat√≥rio"""
        if not data:
            return "Nenhum dado encontrado para o relat√≥rio."
        
        body = f"Total de Registros: {len(data)}\n\n"
        
        # Mostrar primeiros 5 registros como exemplo
        for i, record in enumerate(data[:5]):
            body += f"Registro {i+1}:\n"
            for key, value in record.items():
                body += f"  {key}: {value}\n"
            body += "\n"
        
        if len(data) > 5:
            body += f"... e mais {len(data) - 5} registros\n"
        
        return body
    
    def _generate_footer(self) -> str:
        """Gerar rodap√© do relat√≥rio"""
        return f"""
========================================
Relat√≥rio gerado automaticamente
Sistema de Relat√≥rios v1.0
========================================
"""
    
    def _send_email_notification(self, file_path: str, record_count: int) -> None:
        """Enviar notifica√ß√£o por email"""
        print(f"   üìß Email enviado para: admin@empresa.com")
        print(f"   üìß Assunto: Relat√≥rio {self.get_report_type()} - {record_count} registros")
    
    def _send_internal_notification(self, file_path: str, record_count: int) -> None:
        """Enviar notifica√ß√£o interna"""
        print(f"   üîî Notifica√ß√£o interna enviada")
        print(f"   üîî Arquivo: {file_path}")
    
    def _notify_stakeholders(self, file_path: str, record_count: int) -> None:
        """Notificar stakeholders"""
        print(f"   üë• Stakeholders notificados")
        print(f"   üë• Relat√≥rio: {self.get_report_type()} com {record_count} registros")


class SalesReportGenerator(ReportGenerator):
    """Gerador de relat√≥rios de vendas"""
    
    def validate_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Validar dados de vendas"""
        print("üîç Validando dados de vendas...")
        
        validated_data = []
        for record in data:
            # Validar campos obrigat√≥rios
            if 'vendedor' in record and 'valor' in record and 'data' in record:
                # Validar valor num√©rico
                try:
                    float(record['valor'])
                    validated_data.append(record)
                except ValueError:
                    print(f"‚ö†Ô∏è Valor inv√°lido ignorado: {record}")
            else:
                print(f"‚ö†Ô∏è Registro incompleto ignorado: {record}")
        
        return validated_data
    
    def process_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Processar dados de vendas"""
        print("‚öôÔ∏è Processando dados de vendas...")
        
        processed_data = []
        for record in data:
            processed_record = {
                'vendedor': record['vendedor'].upper(),
                'valor': float(record['valor']),
                'data': record['data'],
                'comissao': float(record['valor']) * 0.05,  # 5% de comiss√£o
                'status': 'PROCESSADO'
            }
            processed_data.append(processed_record)
        
        return processed_data
    
    def format_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Formatar dados de vendas"""
        print("üìù Formatando dados de vendas...")
        
        formatted_data = []
        for record in data:
            formatted_record = {
                'Vendedor': record['vendedor'],
                'Valor da Venda': f"R$ {record['valor']:.2f}",
                'Data': record['data'],
                'Comiss√£o': f"R$ {record['comissao']:.2f}",
                'Status': record['status']
            }
            formatted_data.append(formatted_record)
        
        return formatted_data
    
    def get_file_extension(self) -> str:
        return "txt"
    
    def get_report_type(self) -> str:
        return "VENDAS"


class InventoryReportGenerator(ReportGenerator):
    """Gerador de relat√≥rios de estoque"""
    
    def validate_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Validar dados de estoque"""
        print("üîç Validando dados de estoque...")
        
        validated_data = []
        for record in data:
            # Validar campos obrigat√≥rios
            if 'produto' in record and 'quantidade' in record and 'preco' in record:
                # Validar quantidade e pre√ßo num√©ricos
                try:
                    int(record['quantidade'])
                    float(record['preco'])
                    validated_data.append(record)
                except ValueError:
                    print(f"‚ö†Ô∏è Dados num√©ricos inv√°lidos ignorados: {record}")
            else:
                print(f"‚ö†Ô∏è Registro incompleto ignorado: {record}")
        
        return validated_data
    
    def process_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Processar dados de estoque"""
        print("‚öôÔ∏è Processando dados de estoque...")
        
        processed_data = []
        for record in data:
            quantidade = int(record['quantidade'])
            preco = float(record['preco'])
            
            processed_record = {
                'produto': record['produto'].upper(),
                'quantidade': quantidade,
                'preco': preco,
                'valor_total': quantidade * preco,
                'status_estoque': 'ALTO' if quantidade > 100 else 'BAIXO' if quantidade < 20 else 'NORMAL'
            }
            processed_data.append(processed_record)
        
        return processed_data
    
    def format_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Formatar dados de estoque"""
        print("üìù Formatando dados de estoque...")
        
        formatted_data = []
        for record in data:
            formatted_record = {
                'Produto': record['produto'],
                'Quantidade': record['quantidade'],
                'Pre√ßo Unit√°rio': f"R$ {record['preco']:.2f}",
                'Valor Total': f"R$ {record['valor_total']:.2f}",
                'Status do Estoque': record['status_estoque']
            }
            formatted_data.append(formatted_record)
        
        return formatted_data
    
    def get_file_extension(self) -> str:
        return "csv"
    
    def get_report_type(self) -> str:
        return "ESTOQUE"


class FinancialReportGenerator(ReportGenerator):
    """Gerador de relat√≥rios financeiros"""
    
    def validate_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Validar dados financeiros"""
        print("üîç Validando dados financeiros...")
        
        validated_data = []
        for record in data:
            # Validar campos obrigat√≥rios
            if 'conta' in record and 'valor' in record and 'tipo' in record:
                # Validar valor num√©rico
                try:
                    float(record['valor'])
                    validated_data.append(record)
                except ValueError:
                    print(f"‚ö†Ô∏è Valor inv√°lido ignorado: {record}")
            else:
                print(f"‚ö†Ô∏è Registro incompleto ignorado: {record}")
        
        return validated_data
    
    def process_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Processar dados financeiros"""
        print("‚öôÔ∏è Processando dados financeiros...")
        
        processed_data = []
        for record in data:
            valor = float(record['valor'])
            
            processed_record = {
                'conta': record['conta'].upper(),
                'valor': valor,
                'tipo': record['tipo'].upper(),
                'categoria': 'RECEITA' if valor > 0 else 'DESPESA',
                'status': 'PROCESSADO'
            }
            processed_data.append(processed_record)
        
        return processed_data
    
    def format_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Formatar dados financeiros"""
        print("üìù Formatando dados financeiros...")
        
        formatted_data = []
        for record in data:
            formatted_record = {
                'Conta': record['conta'],
                'Valor': f"R$ {record['valor']:.2f}",
                'Tipo': record['tipo'],
                'Categoria': record['categoria'],
                'Status': record['status']
            }
            formatted_data.append(formatted_record)
        
        return formatted_data
    
    def get_file_extension(self) -> str:
        return "json"
    
    def get_report_type(self) -> str:
        return "FINANCEIRO"
    
    def save_report(self, content: str) -> str:
        """
        Sobrescrever m√©todo de salvamento para formato JSON
        """
        print("üíæ Salvando relat√≥rio em formato JSON...")
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"relatorio_{self.get_report_type().lower()}_{timestamp}.{self.get_file_extension()}"
        filepath = f"reports/{filename}"
        
        # Simular salvamento em formato JSON
        print(f"   üìÅ Arquivo JSON salvo em: {filepath}")
        print(f"   üìä Tamanho do arquivo: {len(content)} caracteres")
        
        return filepath


class CustomerReportGenerator(ReportGenerator):
    """Gerador de relat√≥rios de clientes"""
    
    def validate_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Validar dados de clientes"""
        print("üîç Validando dados de clientes...")
        
        validated_data = []
        for record in data:
            # Validar campos obrigat√≥rios
            if 'nome' in record and 'email' in record and 'telefone' in record:
                # Validar email
                if '@' in record['email']:
                    validated_data.append(record)
                else:
                    print(f"‚ö†Ô∏è Email inv√°lido ignorado: {record}")
            else:
                print(f"‚ö†Ô∏è Registro incompleto ignorado: {record}")
        
        return validated_data
    
    def process_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Processar dados de clientes"""
        print("‚öôÔ∏è Processando dados de clientes...")
        
        processed_data = []
        for record in data:
            processed_record = {
                'nome': record['nome'].title(),
                'email': record['email'].lower(),
                'telefone': record['telefone'],
                'status': 'ATIVO',
                'data_cadastro': datetime.now().strftime('%Y-%m-%d')
            }
            processed_data.append(processed_record)
        
        return processed_data
    
    def format_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        """Formatar dados de clientes"""
        print("üìù Formatando dados de clientes...")
        
        formatted_data = []
        for record in data:
            formatted_record = {
                'Nome': record['nome'],
                'Email': record['email'],
                'Telefone': record['telefone'],
                'Status': record['status'],
                'Data de Cadastro': record['data_cadastro']
            }
            formatted_data.append(formatted_record)
        
        return formatted_data
    
    def get_file_extension(self) -> str:
        return "xml"
    
    def get_report_type(self) -> str:
        return "CLIENTES"


# Exemplo de uso
def demonstrate_template_method():
    """Demonstra o padr√£o Template Method com sistema de relat√≥rios"""
    print("=== Demonstra√ß√£o do Padr√£o Template Method - Sistema de Relat√≥rios ===\n")
    
    # Dados de exemplo para vendas
    sales_data = [
        {'vendedor': 'Jo√£o Silva', 'valor': '1500.00', 'data': '2024-01-15'},
        {'vendedor': 'Maria Santos', 'valor': '2300.50', 'data': '2024-01-16'},
        {'vendedor': 'Pedro Costa', 'valor': '800.75', 'data': '2024-01-17'}
    ]
    
    # Dados de exemplo para estoque
    inventory_data = [
        {'produto': 'Notebook', 'quantidade': '50', 'preco': '2500.00'},
        {'produto': 'Mouse', 'quantidade': '200', 'preco': '25.00'},
        {'produto': 'Teclado', 'quantidade': '15', 'preco': '150.00'}
    ]
    
    # Dados de exemplo para financeiro
    financial_data = [
        {'conta': 'Vendas', 'valor': '5000.00', 'tipo': 'receita'},
        {'conta': 'Sal√°rios', 'valor': '-3000.00', 'tipo': 'despesa'},
        {'conta': 'Aluguel', 'valor': '-800.00', 'tipo': 'despesa'}
    ]
    
    # Dados de exemplo para clientes
    customer_data = [
        {'nome': 'Ana Silva', 'email': 'ana@email.com', 'telefone': '11999999999'},
        {'nome': 'Carlos Santos', 'email': 'carlos@email.com', 'telefone': '11888888888'},
        {'nome': 'Lucia Costa', 'email': 'lucia@email.com', 'telefone': '11777777777'}
    ]
    
    # Gerar relat√≥rios
    generators = [
        (SalesReportGenerator(), sales_data, "Vendas"),
        (InventoryReportGenerator(), inventory_data, "Estoque"),
        (FinancialReportGenerator(), financial_data, "Financeiro"),
        (CustomerReportGenerator(), customer_data, "Clientes")
    ]
    
    for generator, data, report_type in generators:
        print(f"--- Gerando Relat√≥rio de {report_type} ---")
        try:
            file_path = generator.generate_report(data)
            print(f"‚úÖ Relat√≥rio de {report_type} gerado: {file_path}\n")
        except Exception as e:
            print(f"‚ùå Erro ao gerar relat√≥rio de {report_type}: {e}\n")


def demonstrate_extensibility():
    """Demonstra extensibilidade do padr√£o"""
    print("\n=== Demonstra√ß√£o de Extensibilidade ===\n")
    
    # Criar um novo tipo de gerador de relat√≥rios
    class PerformanceReportGenerator(ReportGenerator):
        """Gerador de relat√≥rios de performance"""
        
        def validate_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
            print("üîç Validando dados de performance...")
            return data  # Valida√ß√£o simples para exemplo
        
        def process_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
            print("‚öôÔ∏è Processando dados de performance...")
            return data  # Processamento simples para exemplo
        
        def format_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
            print("üìù Formatando dados de performance...")
            return data  # Formata√ß√£o simples para exemplo
        
        def get_file_extension(self) -> str:
            return "txt"
        
        def get_report_type(self) -> str:
            return "PERFORMANCE"
    
    # Usar o novo gerador
    performance_data = [
        {'metrica': 'Uptime', 'valor': '99.9%'},
        {'metrica': 'Response Time', 'valor': '150ms'},
        {'metrica': 'Throughput', 'valor': '1000 req/s'}
    ]
    
    performance_generator = PerformanceReportGenerator()
    performance_generator.generate_report(performance_data)


def demonstrate_customization():
    """Demonstra personaliza√ß√£o do padr√£o"""
    print("\n=== Demonstra√ß√£o de Personaliza√ß√£o ===\n")
    
    # Gerador personalizado que sobrescreve m√©todos comuns
    class CustomReportGenerator(ReportGenerator):
        """Gerador de relat√≥rios personalizado"""
        
        def validate_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
            print("üîç Validando dados com l√≥gica personalizada...")
            return data
        
        def process_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
            print("‚öôÔ∏è Processando dados com l√≥gica personalizada...")
            return data
        
        def format_data(self, data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
            print("üìù Formatando dados com l√≥gica personalizada...")
            return data
        
        def get_file_extension(self) -> str:
            return "txt"
        
        def get_report_type(self) -> str:
            return "CUSTOM"
        
        def send_notifications(self, file_path: str, record_count: int) -> None:
            """Sobrescrever m√©todo de notifica√ß√£o para personaliza√ß√£o"""
            print("üìß Enviando notifica√ß√µes personalizadas...")
            print(f"   üìß Email personalizado enviado para: custom@empresa.com")
            print(f"   üìß Assunto personalizado: Relat√≥rio Custom - {record_count} registros")
            print(f"   üîî Notifica√ß√£o personalizada enviada")
            print("‚úÖ Notifica√ß√µes personalizadas enviadas com sucesso")
    
    # Usar o gerador personalizado
    custom_data = [
        {'campo1': 'valor1', 'campo2': 'valor2'},
        {'campo1': 'valor3', 'campo2': 'valor4'}
    ]
    
    custom_generator = CustomReportGenerator()
    custom_generator.generate_report(custom_data)


if __name__ == "__main__":
    demonstrate_template_method()
    demonstrate_extensibility()
    demonstrate_customization()





